{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30646,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"for i in range(1,10,2):\n    print(i)","metadata":{"execution":{"iopub.status.busy":"2024-02-23T13:23:09.409328Z","iopub.execute_input":"2024-02-23T13:23:09.409701Z","iopub.status.idle":"2024-02-23T13:23:09.457781Z","shell.execute_reply.started":"2024-02-23T13:23:09.409670Z","shell.execute_reply":"2024-02-23T13:23:09.456889Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"1\n3\n5\n7\n9\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Write a python program for finding out numbers from 1-100 which are divisible by 7 & 13.**","metadata":{}},{"cell_type":"code","source":"i = 1\nwhile i <= 100:\n    if (i % 7 == 0) and (i % 13 == 0):\n        print(i)\n    i = i + 1   ","metadata":{"execution":{"iopub.status.busy":"2024-02-23T15:55:28.555892Z","iopub.execute_input":"2024-02-23T15:55:28.556237Z","iopub.status.idle":"2024-02-23T15:55:28.588659Z","shell.execute_reply.started":"2024-02-23T15:55:28.556210Z","shell.execute_reply":"2024-02-23T15:55:28.587692Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"91\n","output_type":"stream"}]},{"cell_type":"code","source":"i = 1\nwhile i <= 100:\n    if (i % 7 == 0) and (i % 13 == 0):\n        print(i)\n    i = i + 1   ","metadata":{"execution":{"iopub.status.busy":"2024-02-23T15:59:52.723297Z","iopub.execute_input":"2024-02-23T15:59:52.723634Z","iopub.status.idle":"2024-02-23T15:59:52.729563Z","shell.execute_reply.started":"2024-02-23T15:59:52.723607Z","shell.execute_reply":"2024-02-23T15:59:52.728253Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"91\n","output_type":"stream"}]},{"cell_type":"code","source":"for i in range(1, 101):\n    if i % 7 == 0 and i % 13 == 0:\n        print(i)\n","metadata":{"execution":{"iopub.status.busy":"2024-02-23T16:00:53.689122Z","iopub.execute_input":"2024-02-23T16:00:53.689468Z","iopub.status.idle":"2024-02-23T16:00:53.695140Z","shell.execute_reply.started":"2024-02-23T16:00:53.689442Z","shell.execute_reply":"2024-02-23T16:00:53.693767Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"91\n","output_type":"stream"}]},{"cell_type":"code","source":"i = 1\nwhile i <= 100:\n    if i % 7 == 0 and i % 13 == 0:\n        print(i)\n    i = i + 1   ","metadata":{"execution":{"iopub.status.busy":"2024-02-23T16:01:30.471052Z","iopub.execute_input":"2024-02-23T16:01:30.471394Z","iopub.status.idle":"2024-02-23T16:01:30.476295Z","shell.execute_reply.started":"2024-02-23T16:01:30.471369Z","shell.execute_reply":"2024-02-23T16:01:30.475485Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"91\n","output_type":"stream"}]},{"cell_type":"code","source":"def calculate_sum(n):\n    total_sum = 0\n    current_value = n\n\n    while current_value >= 0:\n        total_sum += current_value\n        current_value -= 2\n\n    return total_sum\n\n# Test Data\ntest_data = [6, 10]\n\nfor n in test_data:\n    result = calculate_sum(n)\n    print(f\"{n} => {result}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-02-23T19:34:38.313623Z","iopub.execute_input":"2024-02-23T19:34:38.314033Z","iopub.status.idle":"2024-02-23T19:34:38.354767Z","shell.execute_reply.started":"2024-02-23T19:34:38.313990Z","shell.execute_reply":"2024-02-23T19:34:38.353625Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"6 => 12\n10 => 30\n","output_type":"stream"}]},{"cell_type":"code","source":"a = 2\nb = 3","metadata":{"execution":{"iopub.status.busy":"2024-02-24T09:34:05.329942Z","iopub.execute_input":"2024-02-24T09:34:05.330385Z","iopub.status.idle":"2024-02-24T09:34:05.336108Z","shell.execute_reply.started":"2024-02-24T09:34:05.330347Z","shell.execute_reply":"2024-02-24T09:34:05.334871Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"c = a\n\na = b\nb = c","metadata":{"execution":{"iopub.status.busy":"2024-02-24T09:34:05.735348Z","iopub.execute_input":"2024-02-24T09:34:05.735708Z","iopub.status.idle":"2024-02-24T09:34:05.741096Z","shell.execute_reply.started":"2024-02-24T09:34:05.735682Z","shell.execute_reply":"2024-02-24T09:34:05.739817Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"print(a,b)","metadata":{"execution":{"iopub.status.busy":"2024-02-24T09:34:06.096208Z","iopub.execute_input":"2024-02-24T09:34:06.096962Z","iopub.status.idle":"2024-02-24T09:34:06.102970Z","shell.execute_reply.started":"2024-02-24T09:34:06.096917Z","shell.execute_reply":"2024-02-24T09:34:06.101509Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"3 2\n","output_type":"stream"}]},{"cell_type":"code","source":"def create_product(name, price):\n    return (name, price)\n\ndef add_money(vending_machine, amount):\n    vending_machine['money_inserted'] += amount\n\ndef select_product(vending_machine,):\n    if 'products' not in vending_machine:\n        return \"Products not initialized\"\n    product_found = False\n    for product in vending_machine['products']:\n        if product[0] == name:\n            product_found = True\n            if vending_machine['money_inserted'] >= product[1]:\n                vending_machine['money_inserted'] -= product[1]\n                return f\"Dispensing {name}\"\n            else:\n                return \"Insufficient funds\"\n    if not product_found:\n        return \"Product not found\"\n\n","metadata":{"execution":{"iopub.status.busy":"2024-02-25T16:45:55.157838Z","iopub.execute_input":"2024-02-25T16:45:55.158246Z","iopub.status.idle":"2024-02-25T16:45:55.192025Z","shell.execute_reply.started":"2024-02-25T16:45:55.158215Z","shell.execute_reply":"2024-02-25T16:45:55.190818Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"\n\nvending_machine = {'money_inserted': 0, 'products': [create_product(\"Coke\", 1.5), create_product(\"Pepsi\", 1.5), create_product(\"Water\", 1)]}\n\nadd_money(vending_machine, 2)\nprint(select_product(vending_machine, \"Coke\"))  # Dispensing Coke\nprint(select_product(vending_machine, \"Pepsi\"))  # Insufficient funds\nprint(select_product(vending_machine, \"Soda\"))   # Product not found","metadata":{"execution":{"iopub.status.busy":"2024-02-25T16:46:08.953406Z","iopub.execute_input":"2024-02-25T16:46:08.953879Z","iopub.status.idle":"2024-02-25T16:46:09.216120Z","shell.execute_reply.started":"2024-02-25T16:46:08.953832Z","shell.execute_reply":"2024-02-25T16:46:09.214902Z"},"trusted":true},"execution_count":2,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[2], line 4\u001b[0m\n\u001b[1;32m      1\u001b[0m vending_machine \u001b[38;5;241m=\u001b[39m {\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmoney_inserted\u001b[39m\u001b[38;5;124m'\u001b[39m: \u001b[38;5;241m0\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mproducts\u001b[39m\u001b[38;5;124m'\u001b[39m: [create_product(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCoke\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;241m1.5\u001b[39m), create_product(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPepsi\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;241m1.5\u001b[39m), create_product(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWater\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;241m1\u001b[39m)]}\n\u001b[1;32m      3\u001b[0m add_money(vending_machine, \u001b[38;5;241m2\u001b[39m)\n\u001b[0;32m----> 4\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[43mselect_product\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvending_machine\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mCoke\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m)  \u001b[38;5;66;03m# Dispensing Coke\u001b[39;00m\n\u001b[1;32m      5\u001b[0m \u001b[38;5;28mprint\u001b[39m(select_product(vending_machine, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPepsi\u001b[39m\u001b[38;5;124m\"\u001b[39m))  \u001b[38;5;66;03m# Insufficient funds\u001b[39;00m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28mprint\u001b[39m(select_product(vending_machine, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mSoda\u001b[39m\u001b[38;5;124m\"\u001b[39m))   \u001b[38;5;66;03m# Product not found\u001b[39;00m\n","\u001b[0;31mTypeError\u001b[0m: select_product() takes 1 positional argument but 2 were given"],"ename":"TypeError","evalue":"select_product() takes 1 positional argument but 2 were given","output_type":"error"}]},{"cell_type":"code","source":"products = {\n    1: ['Pepsi', 10, 38],\n    2: ['CocaCola', 10, 40],\n    3: ['Maaza', 10, 30],\n    4: ['Sprite', 10, 35],\n    5: ['Redbull', 10, 100]\n}\n\ntransactions = []\n\ndef display_products():\n    print(\"Below are the remaining Products\")\n    print(\"ID : Name, Remaining_Quantity, Price\")\n    for product_id, details in products.items():\n        print(f\"{product_id} : {details[0]}, {details[1]}, {details[2]}\")\n\ndef calculate_bill(product_id, quantity):\n    product = products[product_id]\n    price = product[2]\n    remaining_quantity = product[1]\n    if remaining_quantity >= quantity:\n        bill = price * quantity\n        print(f\"Your Bill : {bill}\")\n        transactions.append(bill)\n        product[1] -= quantity\n    else:\n        print(\"Insufficient quantity available.\")\n\ndef owner_login():\n    username = input(\"Please input username: \")\n    password = input(\"Please input password: \")\n    if username == \"Shikha\" and password == \"123\":\n        print(\"Valid Owner\")\n        print(f\"Total transactions: {transactions}\")\n        print(f\"Total Money Calculated: {sum(transactions)}\")\n        print(products)\n    else:\n        print(\"Invalid credentials\")\n\nwhile True:\n    print(\"Press 1 for Customer, 0 for Owner : \", end=\"\")\n    user_choice = input()\n\n    if user_choice == '1':\n        display_products()\n\n        while True:\n            product_id = int(input(\"Enter the product ID : \"))\n            quantity = int(input(\"Enter the quantity : \"))\n            calculate_bill(product_id, quantity)\n\n            continue_choice = input(\"Do you wish to continue? (yes/no): \")\n            if continue_choice.lower() != 'yes':\n                print(f\"Your final bill : {sum(transactions)}\")\n                break\n\n        transactions = []  # Reset transactions for the next customer\n    elif user_choice == '0':\n        owner_login()\n    else:\n        print(\"Invalid choice. Please enter 0 or 1.\")\n","metadata":{"execution":{"iopub.status.busy":"2024-03-02T17:02:37.984415Z","iopub.status.idle":"2024-03-02T17:02:37.984815Z","shell.execute_reply.started":"2024-03-02T17:02:37.984616Z","shell.execute_reply":"2024-03-02T17:02:37.984637Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"products = {\n    1: ['Pepsi', 10, 38],\n    2: ['CocaCola', 10, 40],\n    3: ['Maaza', 10, 30],\n    4: ['Sprite', 10, 35],\n    5: ['Redbull', 10, 100]\n}\n\ntransactions = []\n\ndef display_products():\n    print(\"Below are the remaining Products\")\n    print(\"ID : Name, Remaining_Quantity, Price\")\n    for product_id, details in products.items():\n        print(f\"{product_id} : {details[0]}, {details[1]}, {details[2]}\")\n\ndef calculate_bill(product_id, quantity):\n    product = products[product_id]\n    price = product[2]\n    remaining_quantity = product[1]\n    if remaining_quantity >= quantity:\n        bill = price * quantity\n        print(f\"Your Bill : {bill}\")\n        transactions.append(bill)\n        product[1] -= quantity\n    else:\n        print(\"Insufficient quantity available.\")\n\ndef owner_login():\n    username = input(\"Please input username: \")\n    password = input(\"Please input password: \")\n    if username == \"Shikha\" and password == \"123\":\n        print(\"Valid Owner\")\n        print(f\"Total transactions: {transactions}\")\n        print(f\"Total Money Calculated: {sum(transactions)}\")\n        print(products)\n    else:\n        print(\"Invalid credentials\")\n\nwhile True:\n    print(\"Press 1 for Customer, 0 for Owner : \", end=\"\")\n    user_choice = input()\n\n    if user_choice == '1':\n        display_products()\n\n        while True:\n            product_id = int(input(\"Enter the product ID : \"))\n            quantity = int(input(\"Enter the quantity : \"))\n            calculate_bill(product_id, quantity)\n\n            continue_choice = input(\"Do you wish to continue? (yes/no): \")\n            if continue_choice.lower() != 'yes':\n                print(f\"Your final bill : {sum(transactions)}\")\n                break\n\n        transactions = []  # Reset transactions for the next customer\n    elif user_choice == '0':\n        owner_login()\n    else:\n        print(\"Invalid choice. Please enter 0 or 1.\")\n","metadata":{"execution":{"iopub.status.busy":"2024-03-02T17:02:57.248181Z","iopub.execute_input":"2024-03-02T17:02:57.249129Z","iopub.status.idle":"2024-03-02T17:08:03.186086Z","shell.execute_reply.started":"2024-03-02T17:02:57.249095Z","shell.execute_reply":"2024-03-02T17:08:03.184476Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Press 1 for Customer, 0 for Owner : ","output_type":"stream"},{"output_type":"stream","name":"stdin","text":" 1\n"},{"name":"stdout","text":"Below are the remaining Products\nID : Name, Remaining_Quantity, Price\n1 : Pepsi, 10, 38\n2 : CocaCola, 10, 40\n3 : Maaza, 10, 30\n4 : Sprite, 10, 35\n5 : Redbull, 10, 100\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"Enter the product ID :  3\nEnter the quantity :  5\n"},{"name":"stdout","text":"Your Bill : 150\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"Do you wish to continue? (yes/no):  yes\nEnter the product ID :  3\nEnter the quantity :  5\n"},{"name":"stdout","text":"Your Bill : 150\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"Do you wish to continue? (yes/no):  yes\nEnter the product ID :  3\nEnter the quantity :  5\n"},{"name":"stdout","text":"Insufficient quantity available.\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"Do you wish to continue? (yes/no):  yes\nEnter the product ID :  4\nEnter the quantity :  2\n"},{"name":"stdout","text":"Your Bill : 70\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"Do you wish to continue? (yes/no):  no\n"},{"name":"stdout","text":"Your final bill : 370\nPress 1 for Customer, 0 for Owner : ","output_type":"stream"},{"output_type":"stream","name":"stdin","text":" 0\nPlease input username:  Shikha\nPlease input password:  123\n"},{"name":"stdout","text":"Valid Owner\nTotal transactions: []\nTotal Money Calculated: 0\n{1: ['Pepsi', 10, 38], 2: ['CocaCola', 10, 40], 3: ['Maaza', 0, 30], 4: ['Sprite', 8, 35], 5: ['Redbull', 10, 100]}\nPress 1 for Customer, 0 for Owner : ","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[2], line 42\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m \u001b[38;5;28;01mTrue\u001b[39;00m:\n\u001b[1;32m     41\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPress 1 for Customer, 0 for Owner : \u001b[39m\u001b[38;5;124m\"\u001b[39m, end\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m---> 42\u001b[0m     user_choice \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43minput\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     44\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m user_choice \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m1\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m     45\u001b[0m         display_products()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/ipykernel/kernelbase.py:1262\u001b[0m, in \u001b[0;36mKernel.raw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m   1260\u001b[0m     msg \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraw_input was called, but this frontend does not support input requests.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1261\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m StdinNotImplementedError(msg)\n\u001b[0;32m-> 1262\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_input_request\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1263\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mstr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mprompt\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1264\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_parent_ident\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mshell\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1265\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_parent\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mshell\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1266\u001b[0m \u001b[43m    \u001b[49m\u001b[43mpassword\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m   1267\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/ipykernel/kernelbase.py:1305\u001b[0m, in \u001b[0;36mKernel._input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m   1302\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m:\n\u001b[1;32m   1303\u001b[0m     \u001b[38;5;66;03m# re-raise KeyboardInterrupt, to truncate traceback\u001b[39;00m\n\u001b[1;32m   1304\u001b[0m     msg \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInterrupted by user\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m-> 1305\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m(msg) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m   1306\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m:\n\u001b[1;32m   1307\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlog\u001b[38;5;241m.\u001b[39mwarning(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid Message:\u001b[39m\u001b[38;5;124m\"\u001b[39m, exc_info\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"],"ename":"KeyboardInterrupt","evalue":"Interrupted by user","output_type":"error"}]},{"cell_type":"code","source":"products = {\n    1: ['Pepsi', 10, 38],\n    2: ['CocaCola', 10, 40],\n    3: ['Maaza', 10, 30],\n    4: ['Sprite', 10, 35],\n    5: ['Redbull', 10, 100]\n}\n\ntransactions = []\n\ndef display_products():\n    print(\"Below are the remaining Products\")\n    print(\"ID : Name, Remaining_Quantity, Price\")\n    for product_id, details in products.items():\n        print(f\"{product_id} : {details[0]}, {details[1]}, {details[2]}\")\n\ndef calculate_bill(product_id, quantity):\n    product = products[product_id]\n    price = product[2]\n    remaining_quantity = product[1]\n    if remaining_quantity >= quantity:\n        bill = price * quantity\n        print(f\"Your Bill : {bill}\")\n        transactions.append(bill)\n        product[1] -= quantity\n    else:\n        print(\"Insufficient quantity available.\")\n\ndef owner_login():\n    username = input(\"Please input username: \")\n    password = input(\"Please input password: \")\n    if username == \"Shikha\" and password == \"123\":\n        print(\"Valid Owner\")\n        print(f\"Total transactions: {transactions}\")\n        print(f\"Total Money Calculated: {sum(transactions)}\")\n        print(products)\n    else:\n        print(\"Invalid credentials\")\n\nwhile True:\n    print(\"Press 1 for Customer, 0 for Owner : \", end=\"\")\n    user_choice = input()\n\n    if user_choice == '1':\n        display_products()\n\n        while True:\n            product_id = int(input(\"Enter the product ID : \"))\n            quantity = int(input(\"Enter the quantity : \"))\n            calculate_bill(product_id, quantity)\n\n            continue_choice = input(\"Do you wish to continue? (yes/no): \")\n            if continue_choice.lower() != 'yes':\n                print(f\"Your final bill : {sum(transactions)}\")\n                break\n\n        transactions = []  # Reset transactions for the next customer\n    elif user_choice == '0':\n        owner_login()\n    else:\n        print(\"Invalid choice. Please enter 0 or 1.\")\n","metadata":{"execution":{"iopub.status.busy":"2024-03-02T17:08:03.187376Z","iopub.status.idle":"2024-03-02T17:08:03.188499Z","shell.execute_reply.started":"2024-03-02T17:08:03.188172Z","shell.execute_reply":"2024-03-02T17:08:03.188197Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"products = {\n    1: ['Pepsi', 10, 38],\n    2: ['CocaCola', 10, 40],\n    3: ['Maaza', 10, 30],\n    4: ['Sprite', 10, 35],\n    5: ['Redbull', 10, 100]\n}\n\ntransactions = []\n\ndef display_products():\n    print(\"Below are the remaining Products\")\n    print(\"ID : Name, Remaining_Quantity, Price\")\n    for product_id, details in products.items():\n        print(f\"{product_id} : {details[0]}, {details[1]}, {details[2]}\")\n\ndef calculate_bill(product_id, quantity):\n    product = products[product_id]\n    price = product[2]\n    remaining_quantity = product[1]\n    if remaining_quantity >= quantity:\n        bill = price * quantity\n        print(f\"Your Bill : {bill}\")\n        transactions.append(bill)\n        product[1] -= quantity\n    else:\n        print(\"Insufficient quantity available.\")\n\ndef owner_login():\n    username = input(\"Please input username: \")\n    password = input(\"Please input password: \")\n    if username == \"Shikha\" and password == \"123\":\n        print(\"Valid Owner\")\n        print(f\"Total transactions: {transactions}\")\n        print(f\"Total Money Calculated: {sum(transactions)}\")\n        print(products)\n    else:\n        print(\"Invalid credentials\")\n\nwhile True:\n    print(\"Press 1 for Customer, 0 for Owner : \", end=\"\")\n    user_choice = input()\n\n    if user_choice == '1':\n        display_products()\n\n        while True:\n            product_id = int(input(\"Enter the product ID : \"))\n            quantity = int(input(\"Enter the quantity : \"))\n            calculate_bill(product_id, quantity)\n\n            continue_choice = input(\"Do you wish to continue? (yes/no): \")\n            if continue_choice.lower() != 'yes':\n                print(f\"Your final bill : {sum(transactions)}\")\n                break\n\n        transactions = []  # Reset transactions for the next customer\n    elif user_choice == '0':\n        owner_login()\n    else:\n        print(\"Invalid choice. Please enter 0 or 1.\")\n","metadata":{"execution":{"iopub.status.busy":"2024-03-02T17:08:16.345278Z","iopub.execute_input":"2024-03-02T17:08:16.346149Z","iopub.status.idle":"2024-03-02T17:09:05.340012Z","shell.execute_reply.started":"2024-03-02T17:08:16.346114Z","shell.execute_reply":"2024-03-02T17:09:05.338623Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Press 1 for Customer, 0 for Owner : ","output_type":"stream"},{"output_type":"stream","name":"stdin","text":" 1\n"},{"name":"stdout","text":"Below are the remaining Products\nID : Name, Remaining_Quantity, Price\n1 : Pepsi, 10, 38\n2 : CocaCola, 10, 40\n3 : Maaza, 10, 30\n4 : Sprite, 10, 35\n5 : Redbull, 10, 100\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"Enter the product ID :  3\nEnter the quantity :  5\n"},{"name":"stdout","text":"Your Bill : 150\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"Do you wish to continue? (yes/no):  yes\nEnter the product ID :  4\nEnter the quantity :  2\n"},{"name":"stdout","text":"Your Bill : 70\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"Do you wish to continue? (yes/no):  no\n"},{"name":"stdout","text":"Your final bill : 220\nPress 1 for Customer, 0 for Owner : ","output_type":"stream"},{"output_type":"stream","name":"stdin","text":" 0\nPlease input username:  Shikha\nPlease input password:  123\n"},{"name":"stdout","text":"Valid Owner\nTotal transactions: []\nTotal Money Calculated: 0\n{1: ['Pepsi', 10, 38], 2: ['CocaCola', 10, 40], 3: ['Maaza', 5, 30], 4: ['Sprite', 8, 35], 5: ['Redbull', 10, 100]}\nPress 1 for Customer, 0 for Owner : ","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[3], line 42\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m \u001b[38;5;28;01mTrue\u001b[39;00m:\n\u001b[1;32m     41\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPress 1 for Customer, 0 for Owner : \u001b[39m\u001b[38;5;124m\"\u001b[39m, end\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m---> 42\u001b[0m     user_choice \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43minput\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     44\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m user_choice \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m1\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m     45\u001b[0m         display_products()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/ipykernel/kernelbase.py:1262\u001b[0m, in \u001b[0;36mKernel.raw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m   1260\u001b[0m     msg \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraw_input was called, but this frontend does not support input requests.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1261\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m StdinNotImplementedError(msg)\n\u001b[0;32m-> 1262\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_input_request\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1263\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mstr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mprompt\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1264\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_parent_ident\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mshell\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1265\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_parent\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mshell\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1266\u001b[0m \u001b[43m    \u001b[49m\u001b[43mpassword\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m   1267\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/ipykernel/kernelbase.py:1305\u001b[0m, in \u001b[0;36mKernel._input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m   1302\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m:\n\u001b[1;32m   1303\u001b[0m     \u001b[38;5;66;03m# re-raise KeyboardInterrupt, to truncate traceback\u001b[39;00m\n\u001b[1;32m   1304\u001b[0m     msg \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInterrupted by user\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m-> 1305\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyboardInterrupt\u001b[39;00m(msg) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m   1306\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m:\n\u001b[1;32m   1307\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlog\u001b[38;5;241m.\u001b[39mwarning(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mInvalid Message:\u001b[39m\u001b[38;5;124m\"\u001b[39m, exc_info\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"],"ename":"KeyboardInterrupt","evalue":"Interrupted by user","output_type":"error"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}
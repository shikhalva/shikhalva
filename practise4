{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30664,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"def func():\n    global x\n    x = \"Shikha\"\n    print(x)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-03-05T18:14:46.477103Z","iopub.execute_input":"2024-03-05T18:14:46.477575Z","iopub.status.idle":"2024-03-05T18:14:46.509415Z","shell.execute_reply.started":"2024-03-05T18:14:46.477537Z","shell.execute_reply":"2024-03-05T18:14:46.508452Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"func()","metadata":{"execution":{"iopub.status.busy":"2024-03-05T18:14:48.906661Z","iopub.execute_input":"2024-03-05T18:14:48.907332Z","iopub.status.idle":"2024-03-05T18:14:48.913590Z","shell.execute_reply.started":"2024-03-05T18:14:48.907290Z","shell.execute_reply":"2024-03-05T18:14:48.912496Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Shikha\n","output_type":"stream"}]},{"cell_type":"code","source":"func()\nprint(x)","metadata":{"execution":{"iopub.status.busy":"2024-03-05T18:15:02.821438Z","iopub.execute_input":"2024-03-05T18:15:02.821757Z","iopub.status.idle":"2024-03-05T18:15:02.826255Z","shell.execute_reply.started":"2024-03-05T18:15:02.821734Z","shell.execute_reply":"2024-03-05T18:15:02.825449Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Shikha\nShikha\n","output_type":"stream"}]},{"cell_type":"code","source":"7//3","metadata":{"execution":{"iopub.status.busy":"2024-03-06T09:43:33.651984Z","iopub.execute_input":"2024-03-06T09:43:33.652723Z","iopub.status.idle":"2024-03-06T09:43:33.698585Z","shell.execute_reply.started":"2024-03-06T09:43:33.652689Z","shell.execute_reply":"2024-03-06T09:43:33.697742Z"},"trusted":true},"execution_count":1,"outputs":[{"execution_count":1,"output_type":"execute_result","data":{"text/plain":"2"},"metadata":{}}]},{"cell_type":"code","source":"8//3","metadata":{"execution":{"iopub.status.busy":"2024-03-07T17:15:38.033564Z","iopub.execute_input":"2024-03-07T17:15:38.033942Z","iopub.status.idle":"2024-03-07T17:15:38.040635Z","shell.execute_reply.started":"2024-03-07T17:15:38.033911Z","shell.execute_reply":"2024-03-07T17:15:38.039465Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"2"},"metadata":{}}]},{"cell_type":"code","source":"n = int(input(\"Enter a number: \"))\n\nif n >= 1 and n <= 100:\n    if n % 2 != 0:\n        print(\"Weird\")\n    elif n % 2 == 0 and n >= 2 and n <= 5 :\n        print(\"Not Weird\")\n    elif n % 2 == 0 and n >=6 and n <= 20:\n        print(\"Weird\")\n    elif n % 2 == 0 and n > 20:\n        print(\"Not Weird\")\nelse:\n    print(\"Enter Valid Number\")","metadata":{"execution":{"iopub.status.busy":"2024-03-07T10:21:25.839902Z","iopub.execute_input":"2024-03-07T10:21:25.840201Z","iopub.status.idle":"2024-03-07T10:21:28.742618Z","shell.execute_reply.started":"2024-03-07T10:21:25.840181Z","shell.execute_reply":"2024-03-07T10:21:28.741308Z"},"trusted":true},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdin","text":"Enter a number:  24\n"},{"name":"stdout","text":"Not Weird\n","output_type":"stream"}]},{"cell_type":"code","source":"n = int(input().strip())\n\nif n >= 1 and n <= 100:\n    if n % 2 != 0:\n        print(\"Weird\")\n    elif n % 2 == 0 and n >= 2 and n <= 5 :\n        print(\"Not Weird\")\n    elif n % 2 == 0 and n >=6 and n <= 20:\n        print(\"Weird\")\n    elif n % 2 == 0 and n > 20:\n        print(\"Not Weird\")\nelse:\n    print(\"Enter Valid Number\")","metadata":{"execution":{"iopub.status.busy":"2024-03-07T10:32:33.043469Z","iopub.execute_input":"2024-03-07T10:32:33.043828Z","iopub.status.idle":"2024-03-07T10:32:36.231111Z","shell.execute_reply.started":"2024-03-07T10:32:33.043788Z","shell.execute_reply":"2024-03-07T10:32:36.229744Z"},"trusted":true},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdin","text":" 24\n"},{"name":"stdout","text":"Not Weird\n","output_type":"stream"}]},{"cell_type":"code","source":"n = int(input().strip())\n\nif n >= 1 and n <= 20:\n    for i in range(0,n):\n        print(i**2)\nelse:\n    print(\"Invalid number\" )    ","metadata":{"execution":{"iopub.status.busy":"2024-03-07T12:42:19.623268Z","iopub.execute_input":"2024-03-07T12:42:19.623708Z","iopub.status.idle":"2024-03-07T12:42:21.524091Z","shell.execute_reply.started":"2024-03-07T12:42:19.623637Z","shell.execute_reply":"2024-03-07T12:42:21.523197Z"},"trusted":true},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdin","text":" 5\n"},{"name":"stdout","text":"0\n1\n4\n9\n16\n","output_type":"stream"}]},{"cell_type":"code","source":"import os\n\ndef convert_to_seconds(timestamp):\n    # Implement the conversion logic as before\n    # ...\n\n    def time_delta(t1, t2):\n    # Implement the absolute difference calculation as before\n    # ...\n\n        if __name__ == '__main__':\n            fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n            t = int(input())\n\n            for _ in range(t):\n                t1 = input().strip()\n                t2 = input().strip()\n\n                delta = time_delta(t1, t2)\n\n                # Convert the result to a string before writing to the file\n                fptr.write(str(delta) + '\\n')\n\n            fptr.close()\n","metadata":{"execution":{"iopub.status.busy":"2024-03-07T13:32:15.195979Z","iopub.execute_input":"2024-03-07T13:32:15.196366Z","iopub.status.idle":"2024-03-07T13:32:15.205200Z","shell.execute_reply.started":"2024-03-07T13:32:15.196337Z","shell.execute_reply":"2024-03-07T13:32:15.204107Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"from datetime import datetime, timedelta\n\ndef time_delta(t1, t2):\n    # Parse the input timestamps using the specified format\n    format_str = \"%a %d %b %Y %H:%M:%S %z\"\n    time1 = datetime.strptime(t1, format_str)\n    time2 = datetime.strptime(t2, format_str)\n\n    # Calculate the absolute difference in seconds\n    diff = abs(int((time1 - time2).total_seconds()))\n\n    return diff\n\nif __name__ == \"__main__\":\n    # Input the number of test cases\n    test_cases = int(input().strip())\n\n    # Process each test case\n    for _ in range(test_cases):\n        # Input the two timestamps for each test case\n        timestamp1 = input().strip()\n        timestamp2 = input().strip()\n\n        # Calculate and print the absolute difference in seconds\n        result = time_delta(timestamp1, timestamp2)\n        print(result)\n","metadata":{"execution":{"iopub.status.busy":"2024-03-07T13:38:12.946368Z","iopub.execute_input":"2024-03-07T13:38:12.947013Z"},"trusted":true},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdin","text":" 2\n 13\n"}]},{"cell_type":"code","source":"from datetime import datetime\n\nif __name__ == '__main__':\n    t = int(input())\n    for _ in range(t):\n        s1 = input()\n        s2 = input()\n        t1 = datetime.strptime(s1, \"%a %d %b %Y %H:%M:%S %z\")\n        t2 = datetime.strptime(s2, \"%a %d %b %Y %H:%M:%S %z\")\n        print(abs(int((t1-t2).total_seconds())))","metadata":{"execution":{"iopub.status.busy":"2024-03-07T17:16:41.178565Z","iopub.execute_input":"2024-03-07T17:16:41.178903Z","iopub.status.idle":"2024-03-07T17:19:17.028669Z","shell.execute_reply.started":"2024-03-07T17:16:41.178876Z","shell.execute_reply":"2024-03-07T17:19:17.027417Z"},"trusted":true},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdin","text":" 2\n Sun 10 May 2015 13:54:36 -0700\n Sun 10 May 2015 13:54:36 -0000\n"},{"name":"stdout","text":"25200\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":" Sat 02 May 2015 19:54:36 +0530\n Fri 01 May 2015 13:54:36 -0000\n"},{"name":"stdout","text":"88200\n","output_type":"stream"}]},{"cell_type":"code","source":"from datetime import datetime\n\nif __name__ == '__main__':\n    t = int(input())\n    for _ in range(t):\n        s1 = input()\n        s2 = input()\n        t1 = datetime.strptime(s1, \"%a %d %b %Y %H:%M:%S %z\")\n        t2 = datetime.strptime(s2, \"%a %d %b %Y %H:%M:%S %z\")\n        print(abs(int((t1-t2).total_seconds())))","metadata":{"execution":{"iopub.status.busy":"2024-03-07T17:19:31.777638Z","iopub.execute_input":"2024-03-07T17:19:31.778706Z","iopub.status.idle":"2024-03-07T17:20:52.221479Z","shell.execute_reply.started":"2024-03-07T17:19:31.778668Z","shell.execute_reply":"2024-03-07T17:20:52.220275Z"},"trusted":true},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdin","text":" 3\n Sun 10 May 2015 13:54:36 -0700\n Sun 10 May 2015 13:54:36 -0000\n"},{"name":"stdout","text":"25200\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":" Sat 02 May 2015 19:54:36 +0530\n Fri 01 May 2015 13:54:36 -0000\n"},{"name":"stdout","text":"88200\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":" Fri 01 May 2015 13:54:36 -0000\n Sun 10 May 2015 13:54:36 -0700\n"},{"name":"stdout","text":"802800\n","output_type":"stream"}]},{"cell_type":"code","source":"from datetime import datetime\nfrom datetime import timedelta\n\nif __name__ == '__main__':\n\tn = int(input())\n\ttime_format = \"%a %d %b %Y %H:%M:%S %z\"\n\tfor _ in range(n):\n\t\ta = input()\n\t\tb = input()\n\t\tat = datetime.strptime(a, time_format)\n\t\tbt = datetime.strptime(b, time_format)\n\t\tprint(int(abs((at - bt).total_seconds())))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from datetime import datetime,timedelta\n\nN = int(input())\n\nfor _ in range(N):\n\n    date1 = input()\n    date2 = input()\n    # Sun 10 May 2015 13:54:36 -0700\n    date1 = datetime.strptime(date1,\"%a %d %b %Y %H:%M:%S %z\")\n    date2 = datetime.strptime(date2,\"%a %d %b %Y %H:%M:%S %z\")\n    print(abs(int((date1-date2).total_seconds())))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from datetime import datetime\nfor k in range(int(input())):\n    a, b = (datetime.strptime(input(), '%a %d %b %Y %H:%M:%S %z') for i in '..')\n    print(round(abs((a-b).total_seconds())))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import datetime\n\nT = int(input())\nfor i in range(T):\n    t1 = datetime.datetime.strptime(input(),'%a %d %b %Y %H:%M:%S %z')\n    t2 = datetime.datetime.strptime(input(),'%a %d %b %Y %H:%M:%S %z')\n    if t1>t2:\n        print(int((t1-t2).total_seconds()))\n    else:\n        print(int((t2-t1).total_seconds()))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from datetime import datetime\nT = int(input())\nf = '%a %d %b %Y %H:%M:%S %z'\nfor _ in range(0,T):\n    t1 = datetime.strptime(input(), f)\n    t2 = datetime.strptime(input(), f)\n    d = max(t1, t2) - min(t1, t2)\n    print(int(d.total_seconds()))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from datetime import datetime\n\nfmt = \"%d %b %Y %H:%M:%S %z\"\nfor _ in range(int(input())):\n    t1 = datetime.strptime(input()[4:], fmt)\n    t2 = datetime.strptime(input()[4:], fmt)\n    print(abs(int((t1-t2).total_seconds())))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from time import strptime\nfrom datetime import datetime\n\nf = lambda s: datetime.strptime(s, '%a %d %b %Y %H:%M:%S %z')\n\nt = int(input())\nfor _ in range(t):\n    x = f(input())\n    y = f(input())\n    print(int(abs(x - y).total_seconds()))","metadata":{"execution":{"iopub.status.busy":"2024-03-07T17:27:12.357015Z","iopub.execute_input":"2024-03-07T17:27:12.357397Z","iopub.status.idle":"2024-03-07T17:27:59.714735Z","shell.execute_reply.started":"2024-03-07T17:27:12.357352Z","shell.execute_reply":"2024-03-07T17:27:59.713411Z"},"trusted":true},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdin","text":" 2\n Sat 02 May 2015 19:54:36 +0530\n Fri 01 May 2015 13:54:36 -0000\n"},{"name":"stdout","text":"88200\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":" Sun 10 May 2015 13:54:36 -0700\n Sun 10 May 2015 13:54:36 -0000\n"},{"name":"stdout","text":"25200\n","output_type":"stream"}]},{"cell_type":"code","source":"import datetime\n\nformat_string = \"%a %d %b %Y %H:%M:%S %z\"\nT = int(input())\n\nfor test in range(T):\n    t1 = str(input())\n    t2 = str(input())\n\n    parsed_t1 = datetime.datetime.strptime(t1, format_string)\n    parsed_t2 = datetime.datetime.strptime(t2, format_string)\n\n    diff = parsed_t2 - parsed_t1\n\n    print (int(abs(diff.total_seconds())))","metadata":{"execution":{"iopub.status.busy":"2024-03-07T17:21:56.936997Z","iopub.execute_input":"2024-03-07T17:21:56.937405Z","iopub.status.idle":"2024-03-07T17:23:09.813132Z","shell.execute_reply.started":"2024-03-07T17:21:56.937358Z","shell.execute_reply":"2024-03-07T17:23:09.812064Z"},"trusted":true},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdin","text":" 2\n Sat 02 May 2015 19:54:36 +0530\n Fri 01 May 2015 13:54:36 -0000\n"},{"name":"stdout","text":"88200\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":" Sun 10 May 2015 13:54:36 -0700\n Sun 10 May 2015 13:54:36 -0000\n"},{"name":"stdout","text":"25200\n","output_type":"stream"}]},{"cell_type":"code","source":"def gettime():\n    s = raw_input()\n    t = datetime.strptime(s[:-6], \"%a %d %b %Y %H:%M:%S\")\n    m = int(s[-2:])  \n    h = int(s[-4:-2])\n    if s[-5] == '+':\n        t -= timedelta(hours=h, minutes=m)\n    else:\n        t += timedelta(hours=h, minutes=m)\n    return t\nfor _ in xrange(input()):\n    t1 = gettime()\n    t2 = gettime()\n    d = abs(t1 - t2)\n    #print d\n    print d.days * 86400 + d.seconds","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import re\n\ndef is_valid_uid(uid):\n    # Rule 1: At least 2 uppercase English alphabet characters\n    if sum(1 for char in uid if char.isupper()) < 2:\n        return False\n\n    # Rule 2: At least 3 digits\n    if sum(1 for char in uid if char.isdigit()) < 3:\n        return False\n\n    # Rule 3: Only alphanumeric characters\n    if not re.match(\"^[a-zA-Z0-9]+$\", uid):\n        return False\n\n    # Rule 4: No character should repeat\n    if len(set(uid)) != len(uid):\n        return False\n\n    # Rule 5: Exactly 10 characters in a valid UID\n    if len(uid) != 10:\n        return False\n\n    return True\n\nif __name__ == \"__main__\":\n    # Input the number of test cases\n    t = int(input())\n\n    for _ in range(t):\n        # Input the UID for each test case\n        uid = input().strip()\n\n        # Check if the UID is valid and print the result\n        print(\"Valid\" if is_valid_uid(uid) else \"Invalid\")\n","metadata":{"execution":{"iopub.status.busy":"2024-03-07T19:17:17.444790Z","iopub.execute_input":"2024-03-07T19:17:17.445649Z","iopub.status.idle":"2024-03-07T19:17:57.429133Z","shell.execute_reply.started":"2024-03-07T19:17:17.445591Z","shell.execute_reply":"2024-03-07T19:17:57.427930Z"},"trusted":true},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdin","text":" 2\n B1CD102354\n"},{"name":"stdout","text":"Invalid\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":" B1CDEF2354\n"},{"name":"stdout","text":"Valid\n","output_type":"stream"}]},{"cell_type":"code","source":"def is_valid_uid(uid):\n    # Rule 1: At least 2 uppercase English alphabet characters\n    if sum(char.isupper() for char in uid) < 2:\n        return False\n\n    # Rule 2: At least 3 digits\n    if sum(char.isdigit() for char in uid) < 3:\n        return False\n\n    # Rule 3: Only alphanumeric characters\n    if not uid.isalnum():\n        return False\n\n    # Rule 4: No character should repeat\n    if len(set(uid)) != len(uid):\n        return False\n\n    # Rule 5: Exactly 10 characters in a valid UID\n    if len(uid) != 10:\n        return False\n\n    return True\n\nif __name__ == \"__main__\":\n    # Input the number of test cases\n    t = int(input())\n\n    for _ in range(t):\n        # Input the UID for each test case\n        uid = input().strip()\n\n        # Check if the UID is valid and print the result\n        print(\"Valid\" if is_valid_uid(uid) else \"Invalid\")\n","metadata":{"execution":{"iopub.status.busy":"2024-03-07T19:18:16.570746Z","iopub.execute_input":"2024-03-07T19:18:16.571174Z","iopub.status.idle":"2024-03-07T19:18:43.139395Z","shell.execute_reply.started":"2024-03-07T19:18:16.571140Z","shell.execute_reply":"2024-03-07T19:18:43.138284Z"},"trusted":true},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdin","text":" 2\n B1CD102354\n"},{"name":"stdout","text":"Invalid\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":" B1CDEF2354\n"},{"name":"stdout","text":"Valid\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}